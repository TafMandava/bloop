<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.microservices.flash</groupId>
		<artifactId>bloop-bom</artifactId>
		<version>1.0.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.microservices.flash</groupId>
	<artifactId>bloop-client</artifactId>
	<version>1.0.0</version>
	<name>bloop-client</name>
	
	<description>Client Application</description>

	<properties>
		<!-- set this to your docker account name -->
		<docker.image.prefix>tafmandava</docker.image.prefix>
		<!-- set to name of project -->
		<docker.image.name>${project.artifactId}</docker.image.name>
	</properties>

		<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Lombok updates classes with additional methods during compilation and the resulting byte codes that will be run by the JVM will include the methods generated by Lombok  -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
		</dependency>

		<dependency>
	        <groupId>com.microservices.flash</groupId>
	        <artifactId>bloop-common-data</artifactId>
		</dependency>	

		<!-- https://mvnrepository.com/artifact/io.confluent/kafka-avro-serializer/5.5.1 -->
		<!-- https://mvnrepository.com/artifact/io.confluent/kafka-avro-serializer -->
		<!-- Add exclusions to kafka-avro-serializer dependency for Slf4j, log4j and Swagger because we do not want to use these dependencies from the kafka-avro-serializer library -->
		<!-- When we produce Avro messages we need to serialise them inorder to push into the topic  -->
		<dependency>
			<groupId>io.confluent</groupId>
			<artifactId>kafka-avro-serializer</artifactId>
		</dependency>		
		<dependency>
			<groupId>io.confluent</groupId>
			<artifactId>kafka-schema-registry-client</artifactId>			
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>	

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>	

			<!-- To be able to use the Spring Boot application annotation on the service itself -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-autoconfigure</artifactId>
		</dependency>

		<dependency>
			<groupId>com.microservices.flash</groupId>
			<artifactId>bloop-common-data</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity5</artifactId>
		</dependency>		

		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
		</dependency>

		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>	
		</dependency>

		<!-- For discovery and reference of bootsrap and jquery files by the application. Use the default version provided by Spring Boot -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>webjars-locator-core</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
    	</dependency>

	    <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-client</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
		</dependency>

		<dependency>
			<groupId>com.github.JensPiegsa</groupId> 
			<artifactId>wiremock-extension</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>								
				
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
				    <image>
					    <name>${docker.image.prefix}/${docker.image.name}:${project.version}</name>
					</image>
				</configuration>
				<executions>
				    <execution>
					    <!-- We want to create a docker image when we run the maven install command -->
					    <phase>install</phase>
						<goals>
						    <!-- Create a docker image using buid-image -->
							<!-- buid-image follows Layered approach and prevents single fat jar and use caching during image update-->
							<!-- here won't be any need to update the whole jar-->
							<!-- This is achieved with the help of Cloud Native build packs buildpacks.io -->
							<!-- Library codes are less likely to change between builds so it is placed in its own layer -->
							<!-- Application code is more likely to change between builds so it is isolated in a separate layer -->
						    <goal>build-image</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
